"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35],{1228:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>v,contentTitle:()=>b,default:()=>D,frontMatter:()=>w,metadata:()=>t,toc:()=>y});const t=JSON.parse('{"id":"lab00/index","title":"Laboratory 0: Introductory Applications","description":"Useful chapters from ATmega324P Datasheet","source":"@site/lab/lab00/index.mdx","sourceDirName":"lab00","slug":"/lab00/","permalink":"/lab/lab00/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"labSidebar","previous":{"title":"General Lab Rules","permalink":"/lab/"},"next":{"title":"Laboratory 1: USART. Debugging","permalink":"/lab/lab01/"}}');var r=i(4848),s=i(8453),o=i(3205),l=i(7003);const a="\nmacro |= (1 << bit_index)\n",c="\nmacro &= ~(1 << bit_index)\n",h="\nmacro ^= (1 << bit_index)\n",d="\nmacro & (1 << bit_index)\n",u="\nDDRB = 8;               // NOT RECOMMENDED.\nDDRB = (1 << 3);        // Also not recommended, as it hardcodes the pin index.\n",p="\nDDRB |= (1 << PB3);     // RECOMMENDED.\nDDRB |= _BV(PB3);       // RECOMMENDED.\n",m="\nbrew install avrdude\nxcode-select --install\nbrew tap osx-cross/avr\nbrew install avr-gcc\n",x="\n$ avrdude -c arduino -P /dev/ttyUSB0 -b 57600 -p atmega324p -U flash:w:lab0.hex:a\n\nC:/> avrdude -c arduino -P COM12 -b 57600 -p atmega324p -U flash:w:lab0.hex:a\n",g="\n upload_protocol = urclock\n",j="\n#include <avr/io.h>\n#include <util/delay.h>\n\nint main() {\n    /* Set pin 7 of port D as an output. */\n    DDRD |= (1 << PD7);\n\n    while(1) {\n        /* Toggle the state of the pin. */\n        PORTD ^= (1 << PD7);\n        _delay_ms(500);\n    }\n\n    return 0;\n}\n",f="\n# Linux\nPORT ?= /dev/ttyUSB0\n# Windows\n#PORT ?= COM1\n\nall: main.hex\n\nmain.hex: main.elf\n\tavr-objcopy  -j .text -j .data -O ihex $^ $@\n\tavr-size main.elf\n\nmain.elf: main.c\n\tavr-gcc -mmcu=atmega324p -DF_CPU=12000000 -Os -Wall -o $@ $^\n\nupload: main.hex\n\tavrdude -c urclock -P $(PORT) -b 57600 -p atmega324p -D -xnometadata -U flash:w:$<:a\n\nclean:\n\trm -rf main.elf main.hex\n";const w={sidebar_position:2},b="Laboratory 0: Introductory Applications",v={},y=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"1.1. Why?",id:"11-why",level:3},{value:"1.2. What is a microcontroller (\xb5C)?",id:"12-what-is-a-microcontroller-\xb5c",level:3},{value:"1.3. \xb5C in the Wild",id:"13-\xb5c-in-the-wild",level:3},{value:"1.4. What\u2019s Inside a \xb5C?",id:"14-whats-inside-a-\xb5c",level:3},{value:"2. Microchip (Atmel) AVR",id:"2-microchip-atmel-avr",level:2},{value:"2.1. ATmega324P",id:"21-atmega324p",level:3},{value:"2.2. Laboratory Board",id:"22-laboratory-board",level:3},{value:"2.3. Development Board Pinout",id:"23-development-board-pinout",level:3},{value:"3. Let&#39;s get to work",id:"3-lets-get-to-work",level:2},{value:"3.1. Actuators and Transducers (Sensors)",id:"31-actuators-and-transducers-sensors",level:3},{value:"3.1.1. LEDs",id:"311-leds",level:4},{value:"Current Limiting Resistor Calculation",id:"current-limiting-resistor-calculation",level:5},{value:"3.1.2. Buttons",id:"312-buttons",level:4},{value:"3.2. Working with Registers",id:"32-working-with-registers",level:3},{value:"3.3. I/O Registers",id:"33-io-registers",level:3},{value:"3.3.1. Example of Output Handling",id:"331-example-of-output-handling",level:4},{value:"3.3.2. Example of Input Handling",id:"332-example-of-input-handling",level:4},{value:"4. Developing Programs for AVR",id:"4-developing-programs-for-avr",level:2},{value:"4.1. Development and Compilation",id:"41-development-and-compilation",level:3},{value:"4.2. Programming the Microcontroller",id:"42-programming-the-microcontroller",level:3},{value:"4.3. PlatformIO",id:"43-platformio",level:3},{value:"4.3.1 Alternative to PlatformIO: Installing the avr-gcc Toolchain Separately",id:"431-alternative-to-platformio-installing-the-avr-gcc-toolchain-separately",level:4},{value:"4.4. Hello World",id:"44-hello-world",level:3},{value:"5. Exercises",id:"5-exercises",level:2},{value:"6. Useful Links",id:"6-useful-links",level:2}];function P(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"laboratory-0-introductory-applications",children:"Laboratory 0: Introductory Applications"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Useful chapters from"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-42743-ATmega324P_Datasheet.pdf",children:"ATmega324P Datasheet"})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Pin Configurations - page 15"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ol,{start:"13",children:["\n",(0,r.jsx)(n.li,{children:"I/O-Ports - page 95"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,r.jsx)(n.h3,{id:"11-why",children:"1.1. Why?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Q"}),": What are we doing here? Where is what we learn used? Is it really useful?"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"A"}),': To answer briefly: "a lot," "everywhere," and "yes"; but let\u2019s start with an example.']}),"\n",(0,r.jsx)(n.p,{children:'You\u2019ve just built a new PC and installed RGB lighting on the RAM, fans, and case\u2014a lot of it. Now comes the question: who "presses" the buttons to make the colors appear as set in the software? Should the CPU sit and handle changing the colors? That would be a waste of resources. This is where a microcontroller comes in! It\'s a smaller, simpler processor with a well-defined task within the system. In this case, its job is to control the RGB lighting throughout its lifetime.'}),"\n",(0,r.jsx)(n.h3,{id:"12-what-is-a-microcontroller-\xb5c",children:"1.2. What is a microcontroller (\xb5C)?"}),"\n",(0,r.jsx)(n.p,{children:"TLDR: A computer in a chip. More specifically, it is an integrated circuit that includes a processing unit (CPU), memory (volatile RAM, non-volatile EEPROM, Flash, ROM), and various peripherals that allow it to communicate with the external environment."}),"\n",(0,r.jsx)(n.h3,{id:"13-\xb5c-in-the-wild",children:"1.3. \xb5C in the Wild"}),"\n",(0,r.jsx)(n.p,{children:"We find them in various devices such as phones, household appliances, satellites, airplanes, factories, etc. There is a wide range of microcontrollers available, selected based on the application, primarily considering cost and energy consumption optimization for the device where the \xb5C will be used."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Example projects"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"projects",src:i(9716).A+"",width:"1066",height:"395"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.northstarst.com/",children:"[1, 2] - Bird tracking"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.rcgroups.com/forums/showthread.php?t=1335765",children:"[3] - Palm size quad-copter"})}),"\n",(0,r.jsx)(n.li,{children:"[4] - Line-following robot (Tare N' Bar\u0103)"}),"\n",(0,r.jsx)(n.li,{children:"[5] - Soccer-playing robot (IronFoot)"}),"\n",(0,r.jsx)(n.li,{children:"[6] - Submarine robot (R0X1)"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.instructables.com/id/Easy-build-self-balancing-skateboardrobotsegway-/",children:"[7] - Self-balancing skateboard"})}),"\n"]}),(0,r.jsxs)(n.p,{children:["For more examples, you can start searching here: ",(0,r.jsx)(n.a,{href:"https://www.hackster.io/projects/tags/microcontroller",children:"https://www.hackster.io/projects/tags/microcontroller"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"14-whats-inside-a-\xb5c",children:"1.4. What\u2019s Inside a \xb5C?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Central Processing Unit"})," (\xb5P core) with architectures of 8, 16, 32, or 64 bits"]}),"\n",(0,r.jsxs)(n.li,{children:["Volatile data memory (",(0,r.jsx)(n.strong,{children:"RAM"}),") and/or non-volatile memory (Flash or EEPROM)"]}),"\n",(0,r.jsxs)(n.li,{children:["Non-volatile program memory (",(0,r.jsx)(n.strong,{children:"Flash"})," or ",(0,r.jsx)(n.strong,{children:"EEPROM"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["General-purpose digital input-output ports (",(0,r.jsx)(n.strong,{children:"GPIO"})," - General Purpose Input Output)"]}),"\n",(0,r.jsxs)(n.li,{children:["Serial communication interfaces (",(0,r.jsx)(n.strong,{children:"USART"}),", ",(0,r.jsx)(n.strong,{children:"SPI"}),", ",(0,r.jsx)(n.strong,{children:"I2C"}),", PCM, ",(0,r.jsx)(n.strong,{children:"USB"}),", SDIO, etc.)"]}),"\n",(0,r.jsx)(n.li,{children:"Ethernet interfaces"}),"\n",(0,r.jsxs)(n.li,{children:["Interfaces for graphic displays (LVDS, ",(0,r.jsx)(n.strong,{children:"HDMI"}),", or other dedicated LCD control protocols)"]}),"\n",(0,r.jsx)(n.li,{children:"Timers (internal or used for generating periodic signals - e.g., PWM - or as a watchdog)"}),"\n",(0,r.jsxs)(n.li,{children:["Analog-to-digital and digital-to-analog converters (",(0,r.jsx)(n.strong,{children:"ADC"}),", ",(0,r.jsx)(n.strong,{children:"DAC"}),"), analog front-ends, and other circuits for analog signals"]}),"\n",(0,r.jsx)(n.li,{children:"Integrated voltage source"}),"\n",(0,r.jsx)(n.li,{children:"Programming and debugging interface"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Peripherals"})," represent any internal or external device that connects to a computing system and extends its basic functionality. In the case of a microcontroller, several such peripherals are integrated directly into the chip (examples above). Although they do not resemble PC peripherals (monitor, graphics card, keyboard, mouse, etc.), without them, the microcontroller would not be able to interact with the outside world. Moreover, peripherals help connect more advanced components to the controller and provide functionalities similar to a PC system (internet connection, USB data line, graphic display, etc.)."]}),"\n",(0,r.jsx)(n.h2,{id:"2-microchip-atmel-avr",children:"2. Microchip (Atmel) AVR"}),"\n",(0,r.jsx)(n.p,{children:"Throughout the semester, we will work with microcontrollers from the AVR family by Microchip. These have an 8-bit Harvard architecture and a reduced instruction set (RISC)."}),"\n",(0,r.jsx)(n.h3,{id:"21-atmega324p",children:"2.1. ATmega324P"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ATmega324P",src:i(9804).A+"",width:"640",height:"640"})}),"\n",(0,r.jsx)(n.p,{children:"This is an 8-bit microcontroller from the megaAVR family, which we will use throughout the semester. Its registers and internal data bus are 8-bit wide."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:" \xb5C Specifications "}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"32 KB Flash (determines the maximum program size)"}),"\n",(0,r.jsx)(n.li,{children:"1 KB EEPROM"}),"\n",(0,r.jsx)(n.li,{children:"2 KB RAM"}),"\n",(0,r.jsx)(n.li,{children:"20 MHz maximum clock frequency"}),"\n",(0,r.jsx)(n.li,{children:"Supply voltage between 2.7V and 5.5V"}),"\n",(0,r.jsx)(n.li,{children:"6 PWM channels"}),"\n",(0,r.jsx)(n.li,{children:"8 ADC channels with 10-bit resolution"}),"\n",(0,r.jsx)(n.li,{children:"4 digital I/O ports, each with 8 pins, totaling 32 I/O pins"}),"\n",(0,r.jsx)(n.li,{children:"3 timers (two 8-bit and one 16-bit)"}),"\n",(0,r.jsx)(n.li,{children:"Serial communication interfaces: USART, SPI, TWI"}),"\n",(0,r.jsx)(n.li,{children:"ISP programming interface and JTAG debugging interface"}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"We will learn to configure its pins and interact with the external environment through code. This microcontroller has 40 pins (shown below), of which 5 are for power or auxiliary functions, while 32 are for I/O. It has four ports: A, B, C, and D."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"ATmega324P Pin Configuration",src:i(6758).A+"",width:"842",height:"726"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["For more details, you can always consult the ",(0,r.jsx)(n.a,{href:"https://www.microchip.com/downloads/en/DeviceDoc/Atmel-42743-ATmega324P_Datasheet.pdf",children:"datasheet"})," (the summarized technical documentation) of the microcontroller. :)"]})}),"\n",(0,r.jsx)(n.h3,{id:"22-laboratory-board",children:"2.2. Laboratory Board"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https:*github.com/dantudose/PM-Board",children:"The Laboratory Board"})," is based on the ",(0,r.jsx)(n.a,{href:"https:*ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/DataSheets/ATmega164P-324P-644P-Data-Sheet-40002071A.pdf",children:"ATmega324P microcontroller"})," and comes with the following features:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"LSM9DS0 - 9-axis inertial sensor (accelerometer, gyroscope, and magnetometer)"}),"\n",(0,r.jsx)(n.li,{children:"MPL3115 - Barometric altimeter sensor"}),"\n",(0,r.jsx)(n.li,{children:"Temperature and ambient light sensors"}),"\n",(0,r.jsx)(n.li,{children:"128x160 ST7735 color LCD display with SD card reader"}),"\n",(0,r.jsx)(n.li,{children:"RGB LED"}),"\n",(0,r.jsx)(n.li,{children:"16x2 character LCD display"}),"\n",(0,r.jsx)(n.li,{children:"GPIO LEDs and buttons"}),"\n",(0,r.jsx)(n.li,{children:"JTAG and ISP connectors"}),"\n",(0,r.jsx)(n.li,{children:"Programmable USB interface and data interface"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:i(6789).A+"",width:"451",height:"295"})}),"\n",(0,r.jsx)(n.p,{children:"The laboratory board is a circuit that conveniently provides access to the \xb5C\u2019s pins and contains power, protection circuits, and possibly the \xb5C programmer."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:'The programmer is a special chip, sometimes even another microcontroller, responsible for loading the code into the \xb5C\u2019s memory. We cannot directly connect the \xb5C to a PC\u2019s USB lines; we need an intermediary to "translate" that information.'})}),"\n",(0,r.jsx)(n.h3,{id:"23-development-board-pinout",children:"2.3. Development Board Pinout"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"LCD Displays"})}),"\n",(0,r.jsx)(o.A,{left:"    \n  |  Character LCD  |  GPIO Pin  |\n  |  --- | --- |\n  | RS               |  PC0         |\n  | RW               |  PC1         |\n  | EN               |  PC2         |\n  | D4               |  PC3         |\n  | D5               |  PC4         |\n  | D6               |  PC5         |\n  | D7               |  PC6         |\n  | Backlight        |  PC7         |\n  ",right:"\n|  Graphical LCD  |  GPIO Pin  |\n|  --- | --- |\n| CS               |  PB0        |\n| RST              |  PB1        |\n| A0               |  PB4        |\n| SDA              |  PB5        |\n| SCK              |  PB7        |\n| Backlight        |  PA7        |\n"}),"\n",(0,r.jsx)(o.A,{left:"\n  **I2C Sensors & Bus Addresses**\n\n|  I2C          |  GPIO Pin       | Chip     |  Address |\n|  --- | --- | --- | --- |\n| I2C Enable   | PA6          |  LSM9DS0   |  0x1D (XM) 0x6B (G) |\n| SCL          | PC0          | MPL3115A2  |  0x60                |\n| SDA          | PC1          |            |                      |\n",right:"\n**SD Card**\n\n|     \t |  GPIO Pin\t |\n|  --- | --- |\n|  CS\t |  PA2\t |\n|  MOSI  |  PB5 \t |\n|  MISO  |  PB6 \t |\n|  SCK \t |  PB7 \t |\n"}),"\n",(0,r.jsx)(o.A,{left:"\n\n  **RGB LED**\n\n  ||  GPIO Pin\t|\n  |  --- | --- |\n  |  Red\t  |  PD5  |\n  |  Green  |  PD7  |\n  |  Blue\t  |  PB3  |\n",right:"\n\n  **Miscellaneous**\n\n|     \t |  GPIO Pin\t|\n|  --- | --- |\n| Temperature Sensor  |  PA0  |\n| Ambient Light Sensor |  PA1  |\n| Buttons (BTN1 - 6)\t|  PA5  |\n| BTN 1\t                |  PB2  |\n| BTN 2\t                |  PD6  |\n| Speaker\t            |  PD4  |\n"}),"\n",(0,r.jsx)(n.h2,{id:"3-lets-get-to-work",children:"3. Let's get to work"}),"\n",(0,r.jsx)(n.h3,{id:"31-actuators-and-transducers-sensors",children:"3.1. Actuators and Transducers (Sensors)"}),"\n",(0,r.jsx)(n.p,{children:"To interface with the external environment, various electronic components are used, either as actuators (which modify the external environment's state) or as transducers/sensors (which are influenced by the external environment and provide information to the microcontroller about different parameters)."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example Actuators"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fans"}),"\n",(0,r.jsx)(n.li,{children:"Sound indicators - buzzers"}),"\n",(0,r.jsx)(n.li,{children:"Light indicators"}),"\n",(0,r.jsx)(n.li,{children:"Heating resistors"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsx)(n.p,{children:'Sometimes, an activation element is needed to power an actuator. For example, if we want to start a motor, the \xb5C only sends a logical start command to a transistor, which then opens and allows a larger current to pass through (here, "large current" is relative compared to the few milliamps a \xb5C can output).'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example Sensors"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Buttons"}),"\n",(0,r.jsx)(n.li,{children:"Photoresistors - their electrical resistance is influenced by the amount of light"}),"\n",(0,r.jsx)(n.li,{children:"Thermistors - their electrical resistance is influenced by temperature"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsx)(n.p,{children:"Depending on the type of transducer, the signal might need processing before it can be read by the \xb5C (signal conditioning). For example, a photoresistor must be used in a voltage divider or current source circuit, while a button can be connected directly to the microcontroller."})}),"\n",(0,r.jsx)(n.h4,{id:"311-leds",children:"3.1.1. LEDs"}),"\n",(0,r.jsx)(n.p,{children:"LEDs - Light Emitting Diodes - emit light when they are forward biased. Do not confuse them with traditional light bulbs, as they operate in fundamentally different ways."}),"\n",(0,r.jsx)(n.p,{children:"Depending on the semiconductors used in their construction and the plastic lens that acts as a dispersion lens and optical filter, LEDs can emit light in different colors. Do not confuse LEDs with bulbs! While light bulbs emit light by heating a tungsten filament to high temperatures, LEDs emit light by passing current through a semiconductor material (p-n junction). Unlike bulbs, which have an efficiency of less than 5% (most of the energy is lost as heat), LEDs have a much higher efficiency in converting electrical energy into light."}),"\n",(0,r.jsx)(n.p,{children:"LEDs can be used as status indicators (often used in various devices to signal that a device is on and performing a function) or for illumination, where high-power LEDs are used. In the laboratory, LEDs are used to indicate the state of a pin."}),"\n",(0,r.jsx)(n.h5,{id:"current-limiting-resistor-calculation",children:"Current Limiting Resistor Calculation"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"LEDs are diodes, so the current through them increases exponentially with the applied voltage."})}),"\n",(0,r.jsx)(n.p,{children:"To use an LED as a status indicator for a pin (more specifically, to indicate the presence of voltage), the current through the LED must be limited. The simplest way to do this is by placing a resistor in series with the LED."}),"\n",(0,r.jsx)(n.p,{children:"An LED is designed to operate at a nominal current (e.g., 10mA). The voltage drop at this current for low-power indicator LEDs is determined by the LED\u2019s chemistry (which also determines its color). In the laboratory, because we are using LEDs with such low current requirements, we can power them directly from the logic pins of the \xb5C."}),"\n",(0,r.jsx)(n.p,{children:"The circuit used is as follows:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:" Working circuit and calculation of current-limiting resistor",src:i(9786).A+"",width:"995",height:"723"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": If the microcontroller operates at 5V and we want to use a red LED at 10mA, with a voltage drop of 1.7V as specified by the manufacturer, we need to use a 330-ohm resistor."]}),"\n",(0,r.jsx)(n.h4,{id:"312-buttons",children:"3.1.2. Buttons"}),"\n",(0,r.jsx)(n.p,{children:"The simplest way for a user to interact with a microcontroller is by using buttons. The correct way to connect a push-button in this laboratory is shown in the diagram below:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:" Connecting a push-button: a) incorrect, with floating input, b) correct, with pull-up resistor",src:i(6573).A+"",width:"1920",height:"1080"})}),"\n",(0,r.jsx)(n.p,{children:"Connecting a push-button: a) incorrect, with floating input, b) correct, with pull-up resistor"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"a)"})," Shows a button connected to pin PD0 of the \xb5C. When the button is pressed, the PD0 input will be connected to GND, meaning it will be in the logic \u201c0\u201d state. This connection method is incorrect because when the button is not pressed, the input is in an ",(0,r.jsx)(n.strong,{children:"undefined state"})," (as if left floating), not being connected to either GND or Vcc! This state is called ",(0,r.jsx)(n.strong,{children:"high impedance state"}),". In practice, if we were to read the value of the pin now, it could randomly be read as 1 or 0 depending on environmental conditions. For example, if we bring a finger close to the input, the reading might be 1, and if we move it away, the reading might be 0."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"b)"})," Shows the correct way to connect the button, using a ",(0,r.jsx)(n.strong,{children:"pull-up resistor"})," between the input pin and Vcc. This resistor ensures that the input remains in the logic \u201c1\u201d state when the button is not pressed by \u201cpulling up\u201d the potential of the line to Vcc. Alternatively, a ",(0,r.jsx)(n.strong,{children:"pull-down resistor"})," (connected to GND) can be used, in which case the input is kept in the logic \u201c0\u201d state when the button is not pressed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"In the laboratory"}),": To save external space, in the ATmega328P \xb5C, these resistors are built into the integrated circuit. Initially, they are disabled and can be activated through software."]}),"\n",(0,r.jsx)(n.h3,{id:"32-working-with-registers",children:"3.2. Working with Registers"}),"\n",(0,r.jsx)(n.p,{children:"This can be considered the most important step when using a \xb5C. We must learn how to configure the \xb5C internally so that it performs the functions we desire. In this laboratory, we will configure the pins to function as I/O: some pins will read whether there is voltage on them (input), while others will output 0 volts or 5 volts depending on our software commands."}),"\n",(0,r.jsxs)(n.p,{children:["To clarify the terminology: when we say ",(0,r.jsx)(n.strong,{children:"we set a register"})," or write to a register, we are not referring to the general-purpose registers in the processor that you may have worked with in IOCLA. ",(0,r.jsx)(n.strong,{children:"We are referring to memory addresses"}),' reserved in the \xb5C. Let\u2019s repeat together: "By register, we mean a memory address." Practically speaking, how things work "under the hood" is that these bytes have physical connections, and if we write a bit of 1 or 0 in certain positions, we activate or deactivate components in the \xb5C.']}),"\n",(0,r.jsxs)(n.p,{children:["Whenever you need to configure a peripheral, the best source to find the exact settings and their functions is always the ",(0,r.jsx)(n.a,{href:"http://www.microchip.com/downloads/en/DeviceDoc/Atmel-42743-ATmega324P_Datasheet.pdf",children:"datasheet"})," of the \xb5C. Since it is not convenient to write in code like ",(0,r.jsx)(n.code,{children:"*(0x04) = 0b0000 0001"}),", \xb5C manufacturers provide libraries (",(0,r.jsx)(n.a,{href:"https://www.nongnu.org/avr-libc/user-manual/modules.html",children:"avr-libc"}),") that give names to these addresses. The following cheat sheet shows how to configure a specific bit at a certain address using macros (which are considered best practice)."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["To write a value into a register, you can assign a value directly; however, this method does not make the code very easy to understand. ",(0,r.jsx)(n.em,{children:"Our recommendation"})," is to use bit masks (",(0,r.jsx)(n.code,{children:"(1 << x)"}),") or the ",(0,r.jsx)(n.code,{children:"_BV(x)"})," macro. We also recommend using the pin name instead of its index, as the names are indicative of their function (for example, in the ",(0,r.jsx)(n.code,{children:"ADCSRA"})," register of the analog-to-digital converter, the ",(0,r.jsx)(n.code,{children:"ADEN"})," bit is the enable bit). The pin names, like the registers, are already defined in avr-libc."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operation"}),(0,r.jsx)(n.th,{children:"Syntax"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Set bit to 1"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(l.A,{code:a,inline:!0})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Set bit to 0"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(l.A,{code:c,inline:!0})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Toggle bit"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(l.A,{code:h,inline:!0})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Read bit"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(l.A,{code:d,inline:!0})})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Example: Working with registers"}),"\n",(0,r.jsx)(l.A,{code:u,language:"c"}),"\n",(0,r.jsx)(l.A,{code:p,language:"c"}),"\n",(0,r.jsxs)(n.p,{children:["For more details about working with bits in registers, refer to the tutorial section on the ",(0,r.jsx)(n.a,{href:"https://ocw.cs.pub.ro/courses/pm/tutorial/biti",children:"wiki"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Don't worry, we will have plenty of lab sessions to get used to working with registers and configuring the \xb5C. We encourage you to put in some effort now at the beginning for an easier journey throughout the semester."}),"\n",(0,r.jsx)(n.h3,{id:"33-io-registers",children:"3.3. I/O Registers"}),"\n",(0,r.jsx)(n.p,{children:"For this lab, we have spared you from searching through the datasheet, which can seem complicated at first, and have summarized the memory addresses (registers) you need to modify to complete this lab."}),"\n",(0,r.jsxs)(n.p,{children:["The ATmega324 microcontroller offers 4 I/O ports, each with 8 pins. Internally, each port has three 8-bit registers that allow the user to control ",(0,r.jsx)(n.em,{children:"data flow at the pin level"}),": you can write/read data to/from the respective port. These three registers are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"DDRn"})})," - ",(0,r.jsx)(n.em,{children:"Data Direction Register"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sets the direction of the port pins"}),"\n",(0,r.jsxs)(n.li,{children:["If bit ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"0"}),", pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"input"})]}),"\n",(0,r.jsxs)(n.li,{children:["If bit ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"1"}),", pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"output"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"PORTn"})})," - ",(0,r.jsx)(n.em,{children:"Data Register"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sets the output values of the pins or enables/disables pull-up resistors"}),"\n",(0,r.jsxs)(n.li,{children:["If bit ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"0"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"output"}),", it will be ",(0,r.jsx)(n.strong,{children:"LOW"})]}),"\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"input"}),", the pull-up resistor will be ",(0,r.jsx)(n.strong,{children:"disabled"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["If bit ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"1"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"output"}),", it will be ",(0,r.jsx)(n.strong,{children:"HIGH"})]}),"\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"input"}),", the pull-up resistor will be ",(0,r.jsx)(n.strong,{children:"enabled"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"PINn"})})," - ",(0,r.jsx)(n.em,{children:"Input Pins Address"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the pin is ",(0,r.jsx)(n.strong,{children:"input"}),", we can read data from the respective port","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"LOW"}),", then bit ",(0,r.jsx)(n.em,{children:"x"})," will be ",(0,r.jsx)(n.strong,{children:"0"})]}),"\n",(0,r.jsxs)(n.li,{children:["If pin ",(0,r.jsx)(n.em,{children:"x"})," is ",(0,r.jsx)(n.strong,{children:"HIGH"}),", then bit ",(0,r.jsx)(n.em,{children:"x"})," will be ",(0,r.jsx)(n.strong,{children:"1"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["If the pin is ",(0,r.jsx)(n.strong,{children:"output"}),", we can toggle it automatically","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If we write ",(0,r.jsx)(n.strong,{children:"1"})," to bit ",(0,r.jsx)(n.em,{children:"x"}),", the corresponding bit in ",(0,r.jsx)(n.code,{children:"PORTn"})," will automatically be inverted (",(0,r.jsx)(n.strong,{children:"toggle"})," function)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"n"})," can be A, B, C, or D, depending on the selected port. ",(0,r.jsx)(n.em,{children:"x"})," can be between 0 and 7."]}),"\n",(0,r.jsxs)(n.p,{children:["A detailed description of the ports and their corresponding registers can be found in the ATmega324 datasheet, in the ",(0,r.jsx)(n.em,{children:"I/O Ports"})," chapter."]}),"\n",(0,r.jsx)(n.h4,{id:"331-example-of-output-handling",children:"3.3.1. Example of Output Handling"}),"\n",(0,r.jsxs)(n.p,{children:["Let's assume we have an LED connected to pin 1 of port B (called ",(0,r.jsx)(n.code,{children:"PORTB1"})," or ",(0,r.jsx)(n.code,{children:"PB1"}),"). To turn the LED on or off, follow these steps:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Configure pin ",(0,r.jsx)(n.code,{children:"PB1"})," as an output:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bit 1 (",(0,r.jsx)(n.code,{children:"PB1"}),") in the ",(0,r.jsx)(n.code,{children:"DDRB"})," register should be set to 1"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"DDRB |= (1 << PB1);"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["To turn the LED on, set pin ",(0,r.jsx)(n.code,{children:"PB1"})," to HIGH:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bit 1 (",(0,r.jsx)(n.code,{children:"PB1"}),") in the ",(0,r.jsx)(n.code,{children:"PORTB"})," register should be set to 1"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PORTB |= (1 << PB1);"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["To turn the LED off, set pin ",(0,r.jsx)(n.code,{children:"PB1"})," to LOW:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bit 1 (",(0,r.jsx)(n.code,{children:"PB1"}),") in the ",(0,r.jsx)(n.code,{children:"PORTB"})," register should be set to 0"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PORTB &= ~(1 << PB1);"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"332-example-of-input-handling",children:"3.3.2. Example of Input Handling"}),"\n",(0,r.jsxs)(n.p,{children:["Let's assume we have a button connected to pin 4 of port D (called ",(0,r.jsx)(n.code,{children:"PORTD4"})," or ",(0,r.jsx)(n.code,{children:"PD4"}),"), using the correct connection from case ",(0,r.jsx)(n.strong,{children:"b)"})," shown earlier. To determine the button's state (pressed or released), follow these steps:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Configure pin ",(0,r.jsx)(n.code,{children:"PD4"})," as an input:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bit 4 (",(0,r.jsx)(n.code,{children:"PD4"}),") in the ",(0,r.jsx)(n.code,{children:"DDRD"})," register should be set to 0"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"DDRD &= ~(1 << PD4);"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["To determine whether the button is pressed, read the value of the pin it is attached to. It will be 1 when the button is released and 0 when the button is pressed:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Read bit 4 (",(0,r.jsx)(n.code,{children:"PD4"}),") in the ",(0,r.jsx)(n.code,{children:"PIND"})," register:"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"char val = PIND & (1 << PD4);"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-developing-programs-for-avr",children:"4. Developing Programs for AVR"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Development and Compilation without PlatformIO"}),(0,r.jsx)(n.h3,{id:"41-development-and-compilation",children:"4.1. Development and Compilation"}),(0,r.jsx)(n.p,{children:"For program development, we can use any text editor."}),(0,r.jsxs)(n.p,{children:["In the labs, we will write C code, not assembly (AVRASM), using the ",(0,r.jsx)(n.a,{href:"https://gcc.gnu.org/wiki/avr-gcc",children:"avr-gcc"})," compiler. This can be used on both Linux/Unix and Windows (",(0,r.jsx)(n.a,{href:"http://winavr.sourceforge.net/",children:"WinAVR"}),"). WinAVR includes the C library, avr-libc, which must be installed separately on Linux/Unix systems."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Compilation Process with AVR-GCC",src:i(2205).A+"",width:"834",height:"303"})}),(0,r.jsx)(n.p,{children:"Although our microcontroller is 8-bit, in C code, we can use integer variables of 16/32/64 bits and even floating-point numbers. The compiler handles translating instructions into assembly code that operates on 8-bit architecture."}),(0,r.jsx)(n.p,{children:"As with Linux systems, to program AVR, we need some utilities: the avr-gcc compiler, avr-libc, and AVRDUDE. To install these utilities, Homebrew is recommended. Use the following commands:"}),(0,r.jsx)(l.A,{code:m,language:"bash"}),(0,r.jsxs)(n.p,{children:["To run on M1/M2/M3 processors, you need to install at least version 11 of avr-gcc.\nMore examples can be found ",(0,r.jsx)(n.a,{href:"https://wellys.com/posts/avr_c_macos/",children:"here"}),"."]}),(0,r.jsx)(n.h3,{id:"42-programming-the-microcontroller",children:"4.2. Programming the Microcontroller"}),(0,r.jsx)(n.p,{children:"A microcontroller can be programmed using various methods, such as serial interface programming, an ISP programmer (In-System Programming) using the SPI interface, or a bootloader."}),(0,r.jsxs)(n.p,{children:["In this lab, we will use the last method because it eliminates the need for additional external components to upload the hex file. A ",(0,r.jsx)(n.strong,{children:"bootloader"})," is a program preloaded (using, for example, an ISP programmer) at the end of the microcontroller's program memory. Execution of uploaded code will start from the boot section. The drawback of this method is the memory space occupied by the bootloader."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Executing Programs Using a Bootloader",src:i(9036).A+"",width:"392",height:"338"})}),(0,r.jsx)(n.p,{children:"Using a bootloader requires meeting a condition at the microcontroller\u2019s startup. On lab boards, it runs on each RESET, but we can set any condition detectable by the processor (for example, whether a button is pressed or not). Some microcontrollers have a dedicated ROM for the bootloader, factory-installed (e.g., STM32)."}),(0,r.jsxs)(n.p,{children:["To upload the program to the microcontroller, we must use a utility on the computer. Below is an example of using the ",(0,r.jsx)(n.strong,{children:"avrdude"})," utility on Linux and Windows:"]}),(0,r.jsx)(l.A,{code:x,language:"c"})]}),"\n",(0,r.jsx)(n.h3,{id:"43-platformio",children:"4.3. PlatformIO"}),"\n",(0,r.jsxs)(n.p,{children:["For an all-in-one ",(0,r.jsx)(n.strong,{children:"toolchain and IDE"})," solution, install ",(0,r.jsx)(n.a,{href:"https://platformio.org/",children:"PlatformIO"}),". After installing the PlatformIO extension in VSCode, create a new project targeting ATmega324P as the platform/microcontroller and add the following line to ",(0,r.jsx)(n.strong,{children:"platformio.ini"}),":"]}),"\n",(0,r.jsx)(l.A,{code:g,language:"c"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"PlatformIO alternative"}),(0,r.jsx)(n.h4,{id:"431-alternative-to-platformio-installing-the-avr-gcc-toolchain-separately",children:"4.3.1 Alternative to PlatformIO: Installing the avr-gcc Toolchain Separately"}),(0,r.jsxs)(n.p,{children:["Alright, so you're a hardcore software developer and want to install the toolchain directly using your favorite IDE (who am I kidding, you're working directly in Vim). You have that option too, but it comes with a few headaches. If you want to install just the toolchain, without an IDE, you will need ",(0,r.jsx)(n.strong,{children:"avr-gcc"}),", ",(0,r.jsx)(n.strong,{children:"make"}),", and ",(0,r.jsx)(n.strong,{children:"avrdude"})," to compile and program the development board. We recommend the following installation guides:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://baremetalmicro.com/tutorial_avr_toolchain/03-Install-on-Ubuntu-Linux.html",children:" Linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://tinusaur.com/guides/avr-gcc-toolchain/",children:" Windows"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://wellys.com/posts/avr_c_macos/",children:" Mac"})}),"\n"]}),(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["It is possible that the default installation of avrdude does not support the ",(0,r.jsx)(n.strong,{children:"urclock"})," bootloader on the board, and you may receive an error message when running ",(0,r.jsx)(n.strong,{children:"make upload"}),". To fix this issue, you need to install avrdude 7.2-arduino.1 (or install PlatformIO directly, which comes with the correct version of avrdude)."]})}),(0,r.jsxs)(n.p,{children:["We also recommend using an IDE for code development. If you prefer VSCode (without the PlatformIO extension), check out this ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=LE7-uzhlGVM&ab_channel=WhiteHeart",children:"tutorial"}),"."]}),(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warning"}),": Support for the ",(0,r.jsx)(n.code,{children:"urclock"})," programmer (also known as ",(0,r.jsx)(n.code,{children:"urprotocol"}),"), used by our boards, ",(0,r.jsx)(n.a,{href:"https://github.com/avrdudes/avrdude/blob/main/NEWS",children:"was only added"})," in ",(0,r.jsx)(n.code,{children:"avrdude >= 7.1"}),". Make sure you install a recent version (e.g., ",(0,r.jsx)(n.strong,{children:"7.3"}),")! Notably, Ubuntu 22.04 only provides version 6.3: ",(0,r.jsx)(n.a,{href:"https://github.com/avrdudes/avrdude/releases",children:"download the precompiled version from GitHub"})," or use PlatformIO if you do not meet this minimum version requirement! Of course, if you download the binary manually, don't forget to make it executable and place it somewhere in your PATH (e.g., ",(0,r.jsx)(n.code,{children:"/usr/local/bin/"})," on Linux or ",(0,r.jsx)(n.code,{children:"C:\\Windows\\System32"})," on Windows, plus manually copying ",(0,r.jsx)(n.code,{children:"avrdude.conf"})," if needed)."]})})]}),"\n",(0,r.jsx)(n.h3,{id:"44-hello-world",children:"4.4. Hello World"}),"\n",(0,r.jsxs)(n.p,{children:["We will write a program that turns an LED on and off at 500 ms intervals. The targeted LED is the green one on the laboratory board. This is done by modifying the voltage of one of the microcontroller's pins, in our case, pin 7 of port D (",(0,r.jsx)(n.code,{children:"PD7"}),")."]}),"\n",(0,r.jsx)(l.A,{code:j,language:"c"}),"\n",(0,r.jsxs)(n.p,{children:["To compile with PlatformIO, press ",(0,r.jsx)(n.strong,{children:"Ctrl+Alt+B"}),", then ",(0,r.jsx)(n.strong,{children:"Ctrl+Alt+U"})," to upload."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:" Using a Custom Makefile for Compilation "}),(0,r.jsx)(n.p,{children:"If you have installed the toolchain separately, you need to use the following Makefile:"}),(0,r.jsx)(l.A,{code:f,language:"c"}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The compiler used is ",(0,r.jsx)(n.strong,{children:"avr-gcc"}),". The flags have the following meanings:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-mmcu"}),": Informs the compiler about the type of microcontroller for which the code should be generated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-DF_CPU=12000000"}),": Defines the macro ",(0,r.jsx)(n.code,{children:"F_CPU"}),", which indicates the clock frequency of the microcontroller."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-Os"}),": Optimizes the program for memory usage (quite useful given the limited memory on the chip)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-Wall"}),": Enables all warning messages."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["The file to be programmed onto the board must be in ",(0,r.jsx)(n.em,{children:"ihex"})," format. Therefore, it is necessary to extract the data and code sections from the compiled ELF file and integrate them into an ",(0,r.jsx)(n.em,{children:"ihex"})," file. This step is performed using the ",(0,r.jsx)(n.strong,{children:"avr-objcopy"})," utility."]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"avr-size"})," command shows how much memory different sections of the program occupy. Keep in mind that in the SRAM memory for data, besides the ",(0,r.jsx)(n.code,{children:".data"})," section, the stack will also be placed. To run the program on the ATmega324microcontroller, the ",(0,r.jsx)(n.code,{children:".text"})," section must be smaller than 32 KB, and the ",(0,r.jsx)(n.code,{children:".data"})," section must be smaller than 2 KB."]})]}),(0,r.jsxs)(n.p,{children:["The result of the compilation is the ",(0,r.jsx)(n.strong,{children:"main.hex"})," file. This file is then uploaded to the microcontroller using the ",(0,r.jsx)(n.strong,{children:"upload"})," rule."]})]}),"\n",(0,r.jsx)(n.h2,{id:"5-exercises",children:"5. Exercises"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Task 0"})," Let's start by verifying the setup."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Install your preferred/required IDE and run the Hello World example on the development board in the lab."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Task 1"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Modify the Hello World example so that the lit LED is red instead of green. Hint: Find the pin and port to which this LED (part of the RGB LED) is connected in the ",(0,r.jsx)(n.a,{href:"https://raw.githubusercontent.com/dantudose/PM-Board/main/Hardware/schematic.pdf",children:"board schematic"})," / ",(0,r.jsx)(n.a,{href:"https://github.com/dantudose/PM-Board/tree/main?tab=readme-ov-file#board-pinout",children:"board documentation on GitHub"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": The RGB LED has a common anode, so writing a logical 1 to the corresponding GPIO pin will turn off the LED.\n",(0,r.jsx)(n.strong,{children:"Task 2"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Modify the Hello World example so that the LED changes color when Button 1 (PB2) is pressed."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keep the green LED on by default."}),"\n",(0,r.jsx)(n.li,{children:"Configure the registers to set PB2 as an input."}),"\n",(0,r.jsx)(n.li,{children:"Configure the LED to add another color (red/blue) when the button is pressed. (Don't forget to enable the internal pull-up resistor of the \xb5C for PB2.)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Task 3"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Starting from the application created in Task 2, change the functionality of Button 1 to cycle through LED colors on successive presses (first press - red, second press - green, third press - blue, and so on)."}),"\n",(0,r.jsx)(n.li,{children:"Use Button 2 to toggle between a blinking (flashing) LED and a solid-on state (one press - blinking, second press - always on, next press - blinking again, etc.)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"6-useful-links",children:"6. Useful Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.avrfreaks.net/",children:"AVR Freaks Community"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.nongnu.org/avr-libc/user-manual/modules.html",children:"AVR libc Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://gcc.gnu.org/wiki/avr-gcc",children:"AVR GCC Compiler"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://hackaday.com/2010/10/23/avr-programming-introduction/",children:"Introductory Details on AVR Programming (Blog)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://electronics.howstuffworks.com/led.htm",children:"How LEDs Work"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://raw.githubusercontent.com/dantudose/PM-Board/main/Hardware/schematic.pdf",children:"PM Development Board Schematic"})}),"\n"]})]})}function D(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(P,{...e})}):P(e)}},2205:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/procesul_de_compilare-81b7f35e0e3f478577e22db2b3ac9452.jpg"},3205:(e,n,i)=>{i.d(n,{A:()=>o});i(6540);var t=i(7481),r=i(3092),s=i(4848);const o=e=>{let{left:n,right:i}=e;return(0,s.jsxs)("div",{style:{display:"flex",gap:"20px",alignItems:"flex-start"},children:[(0,s.jsxs)("div",{style:{flex:1},children:[(0,s.jsx)(t.o,{remarkPlugins:[r.A],children:n})," "]}),(0,s.jsxs)("div",{style:{flex:1},children:[(0,s.jsx)(t.o,{remarkPlugins:[r.A],children:i})," "]})]})}},6573:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/conectare_buton-1cca6542565f3f068e275c3c0a3b49fa.png"},6758:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/atmega324pins-c8dc52d6a8794d0a4ded4788301bfaa6.png"},6789:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/placuta-53a4f6f26ddb1097302ba7c6fa988f2a.png"},7003:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var t=i(8069),r=i(4848);const s=e=>{let{code:n,language:i="javascript",inline:s=!1}=e;return s?(0,r.jsx)("code",{style:{backgroundColor:"#f5f5f5",padding:"2px 4px",borderRadius:"4px"},children:n}):(0,r.jsx)(t.A,{language:i,children:n})}},9036:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/avr_bootloader_model-4d2cf809b45926c332eacfb42a34c4e3.jpg"},9716:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/projects-cadd216f930c366a37303d3a9e0f65b7.png"},9786:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/r_limit-f5e5fd5b3b2a2a99d50edebba2592626.png"},9804:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/atmel-atmega324p-20pu-68e7d21082aaadc88b29af54b5215b74.jpg"}}]);